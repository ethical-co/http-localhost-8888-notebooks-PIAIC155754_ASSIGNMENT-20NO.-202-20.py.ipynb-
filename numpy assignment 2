#import numpy as np
Task no 1
def function1():

# create 2d array from 1,12 range 
# dimension should be 6row 2 columns  
# and assign this array values in x values in x variable
# Hint: you can use arange and reshape numpy methods  
#x =  # Write your code here 

print(x)

return x
"""
expected output:
[[ 1  2]
[ 3  4]
[ 5  6]
[ 7  8]
[ 9 10]
[11 12]]
"""
import numpy as np
x2 = np.arange(1,13).reshape((6,2))
x2.shape = (6,2)
print (x2)
[[ 1  2]
 [ 3  4]
 [ 5  6]
 [ 7  8]
 [ 9 10]
 [11 12]]
Task2
def function2():

#create 3D array (3,3,3)
#must data type should have float64
#array value should be satart from 10 and end with 36 (both included)
# Hint: dtype, reshape 

x = 


return x
"""
Expected: out put
array([[[10., 11., 12.], [13., 14., 15.], [16., 17., 18.]], [[19., 20., 21.], [22., 23., 24.], [25., 26., 27.]], [[28., 29., 30.], [31., 32., 33.], [34., 35., 36.]]])
"""

import numpy as np
x2 = np.arange(1,13).reshape((6,2))
print(x2)
[[ 1  2]
 [ 3  4]
 [ 5  6]
 [ 7  8]
 [ 9 10]
 [11 12]]
import numpy as np
x_3d_array = np.array([[3,3,3]])
print(x_3d_array)
[[3 3 3]]
import numpy as np
x.dtype
dtype('float64')
import numpy as np
x = np.arange(10,37).reshape((9,3))
print(x)
[[10 11 12]
 [13 14 15]
 [16 17 18]
 [19 20 21]
 [22 23 24]
 [25 26 27]
 [28 29 30]
 [31 32 33]
 [34 35 36]]
task3
def function3():

#extract those numbers from given array. those are must exist in 5,7 Table
#example [35,70,105,..]
a = np.arange(1, 100*10+1).reshape((100,10))
x = a[] #wrtie your code here
return x
"""
Expected Output:
 [35,  70, 105, 140, 175, 210, 245, 280, 315, 350, 385, 420, 455,
   490, 525, 560, 595, 630, 665, 700, 735, 770, 805, 840, 875, 910,
   945, 980] 
""" 
import numpy as np
np.logical_and[(35,70,105)]
​
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-123-7bae6026d146> in <module>
----> 1 np.logical_and[(35,70,105)]

TypeError: 'numpy.ufunc' object is not subscriptable

​
​
task4
def function4():

#Swap columns 1 and 2 in the array arr.

arr = np.arange(9).reshape(3,3)

return #wrtie your code here
"""
Expected Output:
      array([[1, 0, 2],
            [4, 3, 5],
            [7, 6, 8]])
""" 
import numpy as np
arr = np.arange(9).reshape(3,3)
arr = arr[[1,0,2]]
print(arr)
[[3 4 5]
 [0 1 2]
 [6 7 8]]
task5
def function5():

#Create a null vector of size 20 with 4 rows and 5 columns with numpy function

z = #wrtie your code here

return z
"""
Expected Output:
      array([[0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0]])
import numpy as np
my_array = np.zeros(20).reshape((4,5))
print(my_array)
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
my_array[:,[0, 2]] = my_array[:,[2, 0]]
print("\nAfter swapping arrays:")

After swapping arrays:
print(my_array)
​
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
​
task6
def function6():

# Create a null vector of size 10 but the fifth and eighth value which is 10,20 respectively

arr = #wrtie your code here

return arr
import numpy as np
arr = np.zeros(10)
arr[4] =10 
arr[8] =20
print(arr)
[ 0.  0.  0.  0. 10.  0.  0.  0. 20.  0.]
task7
def function7():

#  Create an array of zeros with the same shape and type as X. Dont use reshape method
x = np.arange(4, dtype=np.int64)

return #write your code here

"""
Expected Output:
      array([0, 0, 0, 0], dtype=int64)
""" 
import numpy as np
a = np.arange(4)
a = a.reshape((1,4))
a
array([[0, 1, 2, 3]])
np.zeros_like(a)
array([[0, 0, 0, 0]])
task8
def function8():

# Create a new array of 2x5 uints, filled with 6.

x = #write your code here

return x

 """
 Expected Output:
          array([[6, 6, 6, 6, 6],
                 [6, 6, 6, 6, 6]], dtype=uint32)
 """ 
import numpy as np
x = np.full((2,5), 6, dtype=np.uint)
print(x)
[[6 6 6 6 6]
 [6 6 6 6 6]]
x.dtype
dtype('uint32')
task9
def function9():

# Create an array of 2, 4, 6, 8, ..., 100.

a = # write your code here

return a

 """
 Expected Output:
          array([  2,   4,   6,   8,  10,  12,  14,  16,  18,  20,  22,  24,  26,
                28,  30,  32,  34,  36,  38,  40,  42,  44,  46,  48,  50,  52,
                54,  56,  58,  60,  62,  64,  66,  68,  70,  72,  74,  76,  78,
                80,  82,  84,  86,  88,  90,  92,  94,  96,  98, 100])
 """ 
import numpy as np
arr = np.array([[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]])
print(arr)
[[  2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  36  38
   40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74
   76  78  80  82  84  86  88  90  92  94  96  98 100]]
task10
def function10():

# Subtract the 1d array brr from the 2d array arr, such that each item of brr subtracts from respective row of arr.

arr = np.array([[3,3,3],[4,4,4],[5,5,5]])
brr = np.array([1,2,3])
subt = # write your code here 

return subt

 """
 Expected Output:
           array([[2 2 2]
                  [2 2 2]
                  [2 2 2]])
 """ 
import numpy as np
a = np.array([[3,3,3],[4,4,4],[5,5,5]])
b = np.array([1,2,3])
c = a - b[:,None]
print(c)
[[2 2 2]
 [2 2 2]
 [2 2 2]]
task11
def function11():

# Replace all odd numbers in arr with -1 without changing arr.

arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
ans = #write your code here 

return ans

 """
 Expected Output:
          array([ 0, -1,  2, -1,  4, -1,  6, -1,  8, -1])
 """ 
import numpy as np
a = np.array([0,1,2,3,4,5,6,7,8,9])
odd_values = (a%2 == 1)
a[odd_values] = -1
print(a)
[ 0 -1  2 -1  4 -1  6 -1  8 -1]
task12
def function12():

# Create the following pattern without hardcoding. Use only numpy functions and the below input array arr.
# HINT: use stacking concept

arr = np.array([1,2,3])
ans = #write your code here 

return ans

 """
 Expected Output:
          array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])
 """ 
import numpy as np
arr1 = np.repeat(arr,3)
arr2 = np.tile(arr,3)
ans = np.hstack((arr1,arr2))
print(ans)
[1 1 1 2 2 2 3 3 3 1 2 3 1 2 3 1 2 3]
task13
def function13():

# Set a condition which gets all items between 5 and 10 from arr.


arr = np.array([2, 6, 1, 9, 10, 3, 27])
ans = #write your code here 

return ans

 """
 Expected Output:
          array([6, 9])
 """ 
import numpy as np
z = np.arange(11)
z = [(3 < z) & (z < 10)] 
print(z)
[array([False, False, False, False,  True,  True,  True,  True,  True,
        True, False])]
​
​
task14
def function14():

# Create an 8X3 integer array from a range between 10 to 34 such that the difference between each element is 1 and then Split the array into four equal-sized sub-arrays.
# Hint use split method


arr = np.arange(10, 34, 1) #write reshape code
ans = #write your code here 

return ans

 """
 Expected Output:
   [array([[10, 11, 12],[13, 14, 15]]), 
    array([[16, 17, 18],[19, 20, 21]]), 
    array([[22, 23, 24],[25, 26, 27]]), 
    array([[28, 29, 30],[31, 32, 33]])]
 """ 
import numpy as np
arr = np.arange(10,34,1).reshape((8,3))
print(arr)
[[10 11 12]
 [13 14 15]
 [16 17 18]
 [19 20 21]
 [22 23 24]
 [25 26 27]
 [28 29 30]
 [31 32 33]]
np.split(arr,4)
[array([[10, 11, 12],
        [13, 14, 15]]),
 array([[16, 17, 18],
        [19, 20, 21]]),
 array([[22, 23, 24],
        [25, 26, 27]]),
 array([[28, 29, 30],
        [31, 32, 33]])]
task15
def function15():

#Sort following NumPy array by the second column


arr = np.array([[ 8,  2, -2],[-4,  1,  7],[ 6,  3,  9]])
ans = #write your code here 

return ans

 """
 Expected Output:
       array([[-4,  1,  7],
               [ 8,  2, -2],
               [ 6,  3,  9]])
 """ 
import numpy as np
arr = np.array([[ 8,  2, -2],[-4,  1,  7],[ 6,  3,  9]])
arr[np.lexsort(arr[:,::-2].T)]
array([[-4,  1,  7],
       [ 6,  3,  9],
       [ 8,  2, -2]])
task16
def function16():

#Write a NumPy program to join a sequence of arrays along depth.


x = np.array([[1], [2], [3]])
y = np.array([[2], [3], [4]])
ans = #write your code here 

return ans

 """
 Expected Output:
            [[[1 2]]
             [[2 3]]
             [[3 4]]]
 """ 
import numpy as np
x = np.array([[1], [2], [3]])
y = np.array([[2], [3], [4]])
np.dstack((x,y))
array([[[1, 2]],

       [[2, 3]],

       [[3, 4]]])
Task17
def function17():

# replace numbers with "YES" if it divided by 3 and 5
# otherwise it will be replaced with "NO"
# Hint: np.where
arr = np.arange(1,10*10+1).reshape((10,10))
return           # Write Your Code HERE
#Excpected Out """ array([['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO'], ['NO', 'NO', 'NO', 'NO', 'YES', 'NO', 'NO', 'NO', 'NO', 'NO'], ['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'YES'], ['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO'], ['NO', 'NO', 'NO', 'NO', 'YES', 'NO', 'NO', 'NO', 'NO', 'NO'], ['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'YES'], ['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO'], ['NO', 'NO', 'NO', 'NO', 'YES', 'NO', 'NO', 'NO', 'NO', 'NO'], ['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'YES'], ['NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO', 'NO']], dtype='<U3') """

import numpy as np
arr = np.arange(1,10*10+1).reshape((10,10))
print(arr)
[[  1   2   3   4   5   6   7   8   9  10]
 [ 11  12  13  14  15  16  17  18  19  20]
 [ 21  22  23  24  25  26  27  28  29  30]
 [ 31  32  33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48  49  50]
 [ 51  52  53  54  55  56  57  58  59  60]
 [ 61  62  63  64  65  66  67  68  69  70]
 [ 71  72  73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88  89  90]
 [ 91  92  93  94  95  96  97  98  99 100]]
arr = np.where(arr)
print(arr)
(array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4,
       4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6,
       6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
       8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9], dtype=int32), array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1,
       2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3,
       4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5,
       6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7,
       8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9], dtype=int32))
Task18
def function18():

# count values of "students" are exist in "piaic"
piaic = np.arange(100)
students = np.array([5,20,50,200,301,7001])
x = # Write you code Here
return x

#Expected output: 3
import numpy as np
piaic = np.arange(100)
students = np.array([5,20,50,200,301,7001])
x = np.count_nonzero(x)
print(x)
3
Task19
def function19():

#Create variable "X" from 1,25 (both are included) range values
#Convert "X" variable dimension into 5 rows and 5 columns
#Create one more variable "W" copy of "X" 
#Swap "W" row and column axis (like transpose)
# then create variable "b" with value equal to 5
# Now return output as "(X*W)+b:

X =   # Write your code here
W =   # Write your code here 
b =   # Write your code here
output =    # Write your code here
return output
#expected output
"""
array([[  6,  17,  38,  69, 110],
   [ 17,  54, 101, 158, 225],
   [ 38, 101, 174, 257, 350],
   [ 69, 158, 257, 366, 485],
   [110, 225, 350, 485, 630]])
"""
import numpy as np
arr = np.arange(26)
print("An array from 1 to 25\n" + repr(arr) + "\n")
An array from 1 to 25
array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16,
       17, 18, 19, 20, 21, 22, 23, 24, 25])

import numpy as np
arr = np.arange(25).reshape((5,5))
print(arr)
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]
​
​
Task20
def function20():

#apply fuction "abc" on each value of Array "X"
x = np.arange(1,11)
def abc(x):
    return x*2+3-2

return #Write your Code here
#Expected Output: array([ 3, 5, 7, 9, 11, 13, 15, 17, 19, 21])

import numpy as np
x = np.arange(1,11)
def abc(x): return x*2+3-2
abc(x)
array([ 3,  5,  7,  9, 11, 13, 15, 17, 19, 21])
