Import the numpy package under the name np
import numpy as np
Create a null vector of size 10
z=np.zeros(10)
print (z)
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
Create a vector with values ranging from 10 to 49
z=np.arange(10,50)
print(z)
[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]
Find the shape of previous array in question 3
z.shape
(40,)
Print the type of the previous array in question 3
z.dtype
dtype('int32')
Print the numpy version and the configuration
print(np.__version__)
1.19.4
np.show_config()
blas_mkl_info:
  NOT AVAILABLE
blis_info:
  NOT AVAILABLE
openblas_info:
    library_dirs = ['D:\\a\\1\\s\\numpy\\build\\openblas_info']
    libraries = ['openblas_info']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
blas_opt_info:
    library_dirs = ['D:\\a\\1\\s\\numpy\\build\\openblas_info']
    libraries = ['openblas_info']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
lapack_mkl_info:
  NOT AVAILABLE
openblas_lapack_info:
    library_dirs = ['D:\\a\\1\\s\\numpy\\build\\openblas_lapack_info']
    libraries = ['openblas_lapack_info']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
lapack_opt_info:
    library_dirs = ['D:\\a\\1\\s\\numpy\\build\\openblas_lapack_info']
    libraries = ['openblas_lapack_info']
    language = f77
    define_macros = [('HAVE_CBLAS', None)]
Print the dimension of the array in question 3
z.ndim
1
Create a boolean array with all the True values
bool_arr = np.ones(10, dtype=bool)
print('numpy array:')
numpy array:
print(bool_arr)
[ True  True  True  True  True  True  True  True  True  True]
Create a two dimensional array
import numpy as np
arr = np.array([[1,2,3],[4,5,6]])
print(arr)
[[1 2 3]
 [4 5 6]]
Create a three dimensional array
import numpy as np
arr = ([[1,2,3],[4,5,6]],[[1,2,3],[4,5,6]])
print(arr)
([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6]])
Reverse a vector (first element becomes last)
import numpy as np
ini_array = np.array([1,2,3,4,5,6])
print("initial array", str(ini_array))
initial array [1 2 3 4 5 6]
print("type of ini_array", type(ini_array))
type of ini_array <class 'numpy.ndarray'>
res = ini_array[::-1]
print("final array", str(res))
final array [6 5 4 3 2 1]
Create a null vector of size 10 but the fifth value which is 1
z=np.zeros(10)
z[4]=1
print(z)
[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]
Create a 3x3 identity matrix
z=np.eye(3)
print(z)
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
arr = np.array([1, 2, 3, 4, 5])
Convert the data type of the given array from int to float

A = np.array((1,2,3,4,5))
>>> A
array([1, 2, 3, 4, 5])
>>> A= A.astype(float)
>>> A
array([1., 2., 3., 4., 5.])
arr1 = np.array([[1., 2., 3.],
        [4., 5., 6.]])  
arr2 = np.array([[0., 4., 1.],

       [7., 2., 12.]])
Multiply arr1 with arr2

>>> a =np.array([[1.,2.,3.],[4.,5.,6.]])
>>> b =np.array([[0.,4.,1.],[7.,2.,12.]])
>>> np.multiply(a,b)
array([[ 0.,  8.,  3.],
       [28., 10., 72.]])
arr1 = np.array([[1., 2., 3.],
        [4., 5., 6.]]) 
arr2 = np.array([[0., 4., 1.],

        [7., 2., 12.]])
Make an array by comparing both the arrays provided above

import numpy as np
an_array = np.array([[1.,2.,3.],[4.,5.,6.]]) 
another_array = np.array ([[0.,4.,1.],[7.,2.,12.]])
comparison = an_array == another_array
equal_arrays = comparison.all()
print(equal_arrays)
False
Extract all odd numbers from arr with values(0-9)
import numpy as np
a= np.array([0,1,2,3,4,5,6,7,8,9])
a[a % 2 == 1]
array([1, 3, 5, 7, 9])
Create a 2d array with 1 on the border and 0 inside
import numpy as np
x = np.ones((5,5))
print("origional array:")
origional array:
print(x)
[[1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]
 [1. 1. 1. 1. 1.]]
print("1 on the border and 0 inside in the array")
1 on the border and 0 inside in the array
x[1:-1,1:-1] = 0
print(x)
[[1. 1. 1. 1. 1.]
 [1. 0. 0. 0. 1.]
 [1. 0. 0. 0. 1.]
 [1. 0. 0. 0. 1.]
 [1. 1. 1. 1. 1.]]
Create a 10x10 array with random values and find the minimum and maximum values
import numpy as np
z=np.random.random((10,10))
zmin,zmax = z.min(),z.max()
print(zmin,zmax)
0.006324950447261668 0.9921063746518606
27. a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])¶
Find the common items between a and b

import numpy as np
a1= np.random.randint([1,2,3,2,3,4,3,4,5,6])
b2= np.random.randint([7,2,10,2,7,4,9,4,9,8])
print(np.intersect1d(a1,b2))
[0 3 5]
a = np.array([1,2,3,2,3,4,3,4,5,6]) b = np.array([7,2,10,2,7,4,9,4,9,8])
Find the positions where elements of a and b match

import numpy as np
a=np.array([1,2,3,2,3,4,3,4,5,6])
b=np.array([7,2,10,2,7,4,9,4,9,8])
np.where (a == b)
(array([1, 3, 5, 7], dtype=int32),)
names = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
Find the unique names and sort them out!

import numpy as np
array = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
print("unique values : ",array)
unique values :  ['Bob' 'Joe' 'Will' 'Bob' 'Will' 'Joe' 'Joe']
arr = np.array(['Bob', 'Joe', 'Will', 'Bob', 'Will', 'Joe', 'Joe'])
print(np.sort(arr))
['Bob' 'Bob' 'Joe' 'Joe' 'Joe' 'Will' 'Will']
a = np.array([1,2,3,4,5]) b = np.array([5,6,7,8,9])
From array a remove all items present in array b

import numpy as np
a=np.array([1,2,3,4,5])
b=np.array([5,6,7,8,9])
result = np.setdiff1d(a, b)
print(result)
[1 2 3 4]
Generate a matrix of 20 random values and find its cumulative sum¶
import numpy as np
ar = np.array([1,2,3,4,5,6,7,8,9,10,11,12,3,4,6,7,8,9,6,5])
sizes = np.array([3,2,2,3,2])
print(ar)
[ 1  2  3  4  5  6  7  8  9 10 11 12  3  4  6  7  8  9  6  5]
